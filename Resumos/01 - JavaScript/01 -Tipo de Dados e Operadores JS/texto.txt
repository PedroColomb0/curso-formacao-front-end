### Aula Completa: Fundamentos do JavaScript

Este material resume os conceitos essenciais das seções de introdução e tipos de dados em JavaScript.

#### Seção 1: Introdução ao JavaScript

Nesta primeira parte, o objetivo é entender o que é o JavaScript, onde ele vive e como podemos "conversar" com ele.

1. O que é JavaScript?

Pense no JavaScript (ou JS) como a "linguagem que dá vida" às páginas da web. Se o HTML é o esqueleto
 (a estrutura) e o CSS é a pele e as roupas (a aparência), o JavaScript é o cérebro e os músculos, 
 permitindo interatividade, animações e dinamismo.

É uma linguagem de programação de alto nível, o que significa que sua escrita se aproxima mais da linguagem humana 
do que da linguagem de máquina.

2. Onde o JavaScript é Utilizado?

Originalmente, o JavaScript foi criado para rodar diretamente nos navegadores de internet 
(como Chrome, Firefox, etc.) para manipular o conteúdo das páginas. Hoje, seu uso se expandiu enormemente:

  * Front-end: Continua sendo a principal linguagem para criar a interatividade que você vê em sites.
  * Back-end: Com tecnologias como o Node.js, o JavaScript também é usado para criar servidores e a lógica por trás das aplicações.
  * Mobile: Frameworks como React Native permitem criar aplicativos para Android e iOS usando JavaScript.
  * Desktop: Ferramentas como o Electron permitem criar programas para computador (como o VS Code e o Discord) com JS.

3. Como Executar JavaScript?

Existem duas maneiras principais de rodar um código JavaScript:

  * No Navegador: Todo navegador moderno possui um "console". Você pode abri-lo (geralmente com a tecla F12), ir até a aba "Console" e escrever código JavaScript que será executado na hora.
  * Com Node.js: Instalando o Node.js no seu computador, você pode executar arquivos `.js` diretamente no seu terminal, sem precisar de um navegador. É assim que o back-end com JavaScript funciona.

-----

#### Seção 2: Tipos de Dados e Operadores

Agora que sabemos o que é o JavaScript, precisamos aprender sobre os "tijolos" fundamentais da linguagem: os dados.

1. O que são Tipos de Dados?

Em programação, os dados podem ser de diferentes tipos: números, textos, valores de "sim" ou "não", etc. O 
JavaScript precisa saber com que tipo de dado está lidando para realizar as operações corretas.

2. Tipo `Number` (Número)

Serve para representar tanto números inteiros (`10`, `150`) quanto números com casas decimais (`3.14`, `99.90`).

  * Operações Aritméticas: Você pode realizar as operações básicas da matemática.

    ```javascript
    // Exemplo de Operações com Numbers
    let soma = 10 + 5;        // Resultado: 15
    let subtracao = 20 - 8;   // Resultado: 12
    let multiplicacao = 7 * 3;  // Resultado: 21
    let divisao = 100 / 2;      // Resultado: 50

    console.log(soma);
    ```

  * Special Numbers (Números Especiais):

      * `Infinity`: Representa o infinito matemático.
      * `-Infinity`: Representa o infinito negativo.
      * `NaN`: Significa "Not a Number" (Não é um Número). Aparece quando uma operação matemática falha (ex: `10 * "texto"`).

3. Tipo `String` (Texto)

Usado para representar texto. O texto deve sempre estar entre aspas duplas (`"`) ou aspas simples (`'`).

  * Concatenação: É o ato de "juntar" strings.

    ```javascript
    // Exemplo de Concatenação
    let nome = "João";
    let sobrenome = "Silva";
    let nomeCompleto = nome + " " + sobrenome; // Resultado: "João Silva"

    console.log(nomeCompleto);
    ```

  * Interpolação (Template Strings): Uma forma mais moderna e legível de incluir variáveis dentro de uma string. Usa-se a crase (`` ` ``) e a sintaxe `${variavel}`.

    ```javascript
    // Exemplo de Interpolação
    let idade = 25;
    let frase = `Olá, meu nome é ${nome} e eu tenho ${idade} anos.`;
    // Resultado: "Olá, meu nome é João e eu tenho 25 anos."

    console.log(frase);
    ```

4. Tipo `Boolean` (Booleano)

Representa um de dois valores: `true` (verdadeiro) ou `false` (falso). É a base da lógica e da tomada de decisões em programação.

```javascript
// Exemplo de Booleanos
let usuarioLogado = true;
let temPermissao = false;
```

  * Comparações: O resultado de uma comparação é sempre um booleano.

    ```javascript
    console.log(10 > 5);   // true (10 é maior que 5)
    console.log(20 < 15);  // false (20 não é menor que 15)
    console.log(50 == 50); // true (50 é igual a 50)
    ```

  * Valor Idêntico (`===`): Além de comparar o valor, também compara o tipo do dado. É considerado uma boa prática usar `===` em vez de `==` para evitar erros.

    ```javascript
    console.log(50 == "50");  // true (compara apenas o valor)
    console.log(50 === "50"); // false (compara valor E tipo - Number vs String)
    ```

5. Operadores Lógicos

Permitem combinar expressões booleanas para criar lógicas mais complexas.

  * `&&` (E / AND): Retorna `true` somente se ambas as condições forem verdadeiras.

  * `||` (OU / OR): Retorna `true` se pelo menos uma das condições for verdadeira.

  * `!` (NÃO / NOT): Inverte o valor booleano ( `!true` vira `false`).

    ```javascript
    // Exemplo de Operadores Lógicos
    let temIdade = true;
    let temIngresso = false;

    // Só pode entrar se tiver idade E tiver ingresso
    console.log("Pode entrar na festa?", temIdade && temIngresso); // false

    // Pode entrar no parque se for sócio OU tiver ingresso
    let ehSocio = true;
    console.log("Pode entrar no parque?", ehSocio || temIngresso); // true
    ```

6. Empty Values (Valores Vazios)

  * `undefined`: Uma variável que foi declarada, mas nunca teve um valor atribuído.
  * `null`: Representa a ausência intencional de um valor. É como um "espaço vazio" que você, programador, colocou de propósito.

7. Mudança de Tipos (Type Conversion)

O JavaScript é uma linguagem de tipagem fraca, o que significa que ele pode converter tipos de dados automaticamente em certas situações.

```javascript
// Exemplo de Mudança de Tipo
let numeroEmString = "123";
let numeroDeVerdade = Number(numeroEmString); // Converte String para Number

let numero = 456;
let stringDeVerdade = String(numero); // Converte Number para String
```

-----

Espero que este "resumão" em formato de aula ajude a solidificar esses conceitos iniciais\! Salve este texto em um arquivo para consultar sempre que precisar.

Se tiver qualquer dúvida sobre algum desses pontos, pode perguntar\!