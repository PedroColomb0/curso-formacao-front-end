// ===================================================================
// == O QUE SÃO OBJETOS EM JAVASCRIPT? UMA EXPLICAÇÃO COMPLETA ==
// ===================================================================

/*
  Imagine que você precisa guardar informações sobre um carro.
  Você poderia criar várias variáveis soltas, assim:

  let marcaDoCarro = "Fiat";
  let modeloDoCarro = "Mobi";
  let anoDoCarro = 2023;
  let corDoCarro = "Branco";
  let ligado = false;

  Funciona, mas não é o ideal. As informações estão espalhadas e não
  parecem ter uma conexão direta entre si no código.

  É aqui que os OBJETOS entram!

  Em programação, um objeto é uma estrutura de dados que permite
  agrupar valores relacionados em uma única entidade. Pense nele
  como um "container" ou uma "caixa" que guarda informações
  sobre a mesma coisa.

  Um objeto em JavaScript é uma coleção de pares "chave-valor".
    - A "chave" é o nome da propriedade (como "marca", "modelo").
    - O "valor" é a informação associada a essa chave (como "Fiat", "Mobi").
*/


// --- Parte 1: Criando um Objeto ---

// Esta é a forma mais comum de criar um objeto, chamada de "objeto literal".
// Usamos as chaves {} para definir o objeto.

const carro = {
  // A seguir, temos os pares "chave: valor"
  marca: "Fiat",        // A chave é "marca", o valor é a string "Fiat"
  modelo: "Mobi",       // A chave é "modelo", o valor é a string "Mobi"
  ano: 2023,            // A chave é "ano", o valor é o número 2023
  cor: "Branco",        // A chave é "cor", o valor é a string "Branco"
  ligado: false,        // A chave é "ligado", o valor é o booleano false
  pecas: ["motor", "porta", "pneu"] // O valor pode ser até um array!
};


// --- Parte 2: Acessando os Dados de um Objeto ---

// Para "ler" uma informação de dentro do objeto, usamos a notação de ponto (.)
// ou a notação de colchetes ([]).

// 1. Notação de Ponto (a mais comum e preferida)
//   Sintaxe: nomeDoObjeto.nomeDaChave

console.log("A marca do carro é:", carro.marca);     // Saída: A marca do carro é: Fiat
console.log("O modelo do carro é:", carro.modelo);   // Saída: O modelo do carro é: Mobi
console.log("O carro está ligado?", carro.ligado);   // Saída: O carro está ligado? false


// 2. Notação de Colchetes
//   Sintaxe: nomeDoObjeto['nomeDaChave']
//   Útil quando o nome da chave tem espaços ou caracteres especiais,
//   ou quando o nome da chave vem de uma variável.

console.log("A cor do carro é:", carro['cor']);     // Saída: A cor do carro é: Branco


// --- Parte 3: Alterando os Dados de um Objeto ---

// Um objeto pode ter seus valores alterados a qualquer momento.
// Mesmo que o objeto tenha sido criado com `const`, podemos mudar
// suas propriedades internas.

console.log("O carro era do ano:", carro.ano); // Saída: O carro era do ano: 2023

// Vamos alterar o ano e a cor
carro.ano = 2024;
carro.cor = "Preto";

console.log("O carro agora é do ano:", carro.ano); // Saída: O carro agora é do ano: 2024
console.log("A nova cor é:", carro.cor);         // Saída: A nova cor é: Preto


// --- Parte 4: Objetos com Funções (Métodos) ---

/*
  Um objeto não precisa guardar apenas dados como textos e números.
  Ele também pode guardar AÇÕES (funções).

  Quando uma função está dentro de um objeto, nós a chamamos de "MÉTODO".
*/

const pessoa = {
  nome: "Pedro",
  idade: 25,
  profissao: "Desenvolvedor",

  // Isso é um MÉTODO. É uma função que pertence ao objeto `pessoa`.
  saudacao: function() {
    // A palavra `this` é especial.
    // Dentro de um método, `this` se refere AO PRÓPRIO OBJETO.
    // Então, `this.nome` é o mesmo que `pessoa.nome`.
    console.log(`Olá! Meu nome é ${this.nome} e eu tenho ${this.idade} anos.`);
  },

  // Outro método
  fazerAniversario: function() {
    this.idade = this.idade + 1; // ou this.idade++
    console.log(`Feliz aniversário! Agora eu tenho ${this.idade} anos.`);
  }
};

// Como chamar (executar) um método?
// Usamos a mesma notação de ponto, mas adicionamos parênteses () no final.

pessoa.saudacao(); // Saída: Olá! Meu nome é Pedro e eu tenho 25 anos.

pessoa.fazerAniversario(); // Saída: Feliz aniversário! Agora eu tenho 26 anos.
pessoa.fazerAniversario(); // Saída: Feliz aniversário! Agora eu tenho 27 anos.

console.log("Idade atualizada:", pessoa.idade); // Saída: Idade atualizada: 27


// ===================================================================
// == RESUMO FINAL ==
// ===================================================================

/*
  1. O que são?
     - São "caixas" que agrupam dados e funcionalidades relacionadas.
     - Usam um sistema de `chave: valor`.

  2. Por que usar?
     - Para organizar o código. Em vez de ter 10 variáveis soltas, você tem
       1 objeto com 10 propriedades.
     - Para representar coisas do mundo real (um usuário, um produto, um carro, etc.)
       de uma forma mais clara e lógica no seu código.

  3. Como usar?
     - Crie com `{}`.
     - Acesse propriedades com `objeto.chave`.
     - Chame métodos com `objeto.metodo()`.
     - A palavra `this` dentro de um método se refere ao próprio objeto.

  Objetos são uma das partes mais fundamentais e poderosas do JavaScript.
  Entendê-los bem é essencial para programar de forma eficaz!
*/


Claro! Aqui estão os pontos principais de forma resumida.

***

### Por que usar Objetos em Programação?

* **Organização:** Para agrupar dados que pertencem à mesma coisa em um único lugar, evitando ter inúmeras variáveis soltas pelo código.

* **Representação:** Para "modelar" coisas do mundo real (como um Usuário, um Produto, um Carro), tornando seu código mais lógico e fácil de entender.

* **Lógica Centralizada:** Para unir os dados (propriedades) com as ações que os manipulam (métodos), criando componentes que sabem como gerenciar a si mesmos.

* **Facilidade de Transporte:** Para passar um conjunto completo de informações de uma vez só. É mais fácil enviar um único objeto `usuario` para uma função do que enviar 10 variáveis separadas.