como se fossem funções dentro do objeto





----///---------

// ===================================================================
// == O QUE SÃO MÉTODOS EM JAVASCRIPT? ==
// ===================================================================

/*
  Nós já vimos que objetos guardam DADOS através de propriedades.
  Por exemplo: a cor de um carro, o nome de uma pessoa.

  Mas e se a gente quisesse guardar AÇÕES que o objeto pode fazer?
  - Um carro pode "ligar" e "acelerar".
  - Uma conta bancária pode "depositar" e "sacar".
  - Um jogador em um jogo pode "pular" e "atacar".

  É para isso que servem os MÉTODOS.

  A definição é muito simples:
  UM MÉTODO É UMA FUNÇÃO QUE ESTÁ DENTRO DE UMA PROPRIEDADE DE UM OBJETO.

  Ou seja:
  Propriedade = Nome (chave) + Valor (dado)
  Método      = Nome (chave) + Valor (que é uma função)
*/


// --- Parte 1: A Analogia ---

// Pense em um objeto como um controle remoto.

const controleRemoto = {
  // Isso é uma PROPRIEDADE (um dado, uma característica)
  cor: "Preto",
  marca: "Genérica",
  numeroDeBotoes: 20,

  // Isso é um MÉTODO (uma ação, um comportamento)
  ligarTV: function() {
    console.log("Comando enviado: Ligar a TV...");
  },

  // Outro MÉTODO
  aumentarVolume: function() {
    console.log("Comando enviado: Aumentar o volume...");
  }
};


// --- Parte 2: Acessando Propriedades vs. Chamando Métodos ---

// Para LER uma propriedade, usamos o nome dela:
console.log("A cor do controle é:", controleRemoto.cor); // Saída: A cor do controle é: Preto

// Para EXECUTAR um método, usamos o nome seguido de parênteses ():
// Os parênteses () são o que dizem ao JavaScript: "Execute esta ação agora!"
controleRemoto.ligarTV();         // Saída: Comando enviado: Ligar a TV...
controleRemoto.aumentarVolume();  // Saída: Comando enviado: Aumentar o volume...

// Se você esquecer os parênteses, você vai apenas "ver" a função, mas não executá-la.
console.log(controleRemoto.ligarTV); // Saída: [Function: ligarTV] (não é o que queremos)


// --- Parte 3: A Palavra Mágica "this" ---

/*
  O mais poderoso dos métodos é quando eles interagem com as
  propriedades do PRÓPRIO objeto.

  Como um método faz para "enxergar" as outras propriedades do objeto onde ele está?
  Usando a palavra-chave `this`.

  Dentro de um método, `this` se refere AO PRÓPRIO OBJETO.
*/

const carro = {
  marca: "Fiat",
  modelo: "Mobi",
  ligado: false, // O estado inicial do carro (propriedade)

  // Método para LIGAR o carro
  ligar: function() {
    // `this.ligado` é o mesmo que `carro.ligado`
    this.ligado = true;
    console.log(`O ${this.marca} ${this.modelo} agora está ligado!`);
  },

  // Método para DESLIGAR o carro
  desligar: function() {
    this.ligado = false;
    console.log(`O ${this.marca} ${this.modelo} foi desligado.`);
  },
  
  // Método que verifica o estado
  verificarStatus: function() {
    // Usamos uma condição para checar o valor da propriedade `ligado`
    if (this.ligado === true) {
      console.log("Status: O carro está LIGADO.");
    } else {
      console.log("Status: O carro está DESLIGADO.");
    }
  }
};

// Vamos testar as ações!
carro.verificarStatus(); // Saída: Status: O carro está DESLIGADO.

carro.ligar();           // Saída: O Fiat Mobi agora está ligado!
carro.verificarStatus(); // Saída: Status: O carro está LIGADO.

carro.desligar();        // Saída: O Fiat Mobi foi desligado.
carro.verificarStatus(); // Saída: Status: O carro está DESLIGADO.


// ===================================================================
// == RESUMO FINAL ==
// ===================================================================

/*
  1. O que é um Método?
     - É uma função que vive dentro de um objeto.

  2. Para que serve?
     - Para definir as AÇÕES e COMPORTAMENTOS que um objeto pode realizar.

  3. Como usar?
     - Defina uma propriedade e coloque uma função como seu valor.
     - Chame o método usando o nome do objeto, um ponto, o nome do método e parênteses `()`. Ex: `meuObjeto.minhaAcao()`.

  4. O que é o `this`?
     - Dentro de um método, `this` é um atalho para se referir ao próprio objeto, permitindo que a ação (método) modifique os dados (propriedades) dele mesmo.

  Em suma: Propriedades são o que um objeto **É**. Métodos são o que um objeto **FAZ**.
*/